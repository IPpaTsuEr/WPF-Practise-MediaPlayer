<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MediaPlayer.Styles"
                    xmlns:fw="clr-namespace:FrameLessWindow.Commands;assembly=FrameLessWindow"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:ml="clr-namespace:MediaPlayer.Modles">
   
    <Style x:Key="MediaListExt" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Content" Value="..."></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            >
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu" >
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource Mode=Self}}">
                    <MenuItem Header="编辑"
                              Command="{Binding DataContext.TopMaskCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              CommandParameter="ShowModifyMask"
                              ></MenuItem>
                    <MenuItem Header="删除"
                              Command="{Binding DataContext.TopMaskCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              CommandParameter="ShowDeleteMask"
                              >
                        
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LovelyToggleButton" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <TextBlock Style="{StaticResource IconText}" 
                                       Text="{StaticResource Heart}" 
                                       Foreground="{DynamicResource ControlBarForeground}"
                                       Name="No_Love"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       ></TextBlock>
                            <TextBlock Style="{StaticResource IconText}" 
                                       Text="{StaticResource HeartSolid}" 
                                       Foreground="{DynamicResource LovelyMarkForeground}"
                                       Name="Yes_Love" Visibility="Collapsed"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       ></TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Yes_Love"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="No_Love"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <!--<Setter Property="Background" Value="{DynamicResource ControlBarHoverBackground}"></Setter>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="Button">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        
                        >
                        <ContentPresenter 
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            TextElement.FontFamily="{TemplateBinding FontFamily}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"></ContentPresenter>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"></Condition>
                                <Condition Property="IsFocused" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="LightBlue"></Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"></Condition>
                                <Condition Property="IsFocused" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="LightBlue"></Setter>
                        </MultiTrigger>-->                        
                        
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlBarHoverBackground}"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="LightBlue"></Setter>
                        </Trigger>

                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
<!--//////////////////////////////Slider///////////////////////////////////-->
    
    <Style x:Key="Slider_RepeatButton" TargetType="RepeatButton">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border    Background="{TemplateBinding Background}" 
                               CornerRadius="2"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Height="{TemplateBinding Height}" 
                               Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider_Thumb" TargetType="Thumb">
        <Setter Property="Foreground" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Gray"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border CornerRadius="15"  Name="Thumb_Border"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            >

                        <TextBlock Name="Inner_Text"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   TextAlignment="Center"
                                   Margin="1"
                                   FontSize="{TemplateBinding FontSize}"
                                   FontFamily="{StaticResource AwesomeS}" 
                                   Foreground="{TemplateBinding Foreground}" >&#xf111;</TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" ></Setter>
                            <Setter Property="Foreground" Value="{DynamicResource SliderHightLightground}"></Setter>
                            <Setter Property="Effect" TargetName="Thumb_Border" >
                                <Setter.Value>
                                    <DropShadowEffect Color="{DynamicResource SliderHightLightColor}" ShadowDepth="0" BlurRadius="4" Direction="0"></DropShadowEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>                    
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="Slider">
        <Setter Property="OverridesDefaultStyle" Value="True"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Background" Value="Red"></Setter>
        <Setter Property="Maximum" Value="1"></Setter>
        <Setter Property="Value" Value="0.5"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid Margin="{TemplateBinding Margin}"> 
                            <Border HorizontalAlignment="Stretch" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness }"
                                    CornerRadius="2" Padding="0" 
                                    Margin="{TemplateBinding Padding}"
                                    Height="4" Width="Auto"  
                                    Background="{TemplateBinding Background}">
                                <Border  x:Name="PART_SelectionRange" ></Border>
                            </Border> 
                        
                        <Track x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Slider_RepeatButton}"  
                                              Background="{TemplateBinding Foreground}"
                                              BorderBrush="{TemplateBinding BorderBrush}"
                                              BorderThickness="{TemplateBinding BorderThickness}"
                                              Height="4" Margin="0,0,-2,0"
                                              Command="{x:Static Slider.DecreaseLarge}" ></RepeatButton>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Slider_RepeatButton}"  Command="{x:Static Slider.IncreaseLarge}" ></RepeatButton>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource Slider_Thumb}"  
                                       Name="P_thumb"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"
                                       HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                       Width="12" Height="12" 
                                       FontSize="{TemplateBinding FontSize}">

                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" SourceName="P_thumb">
                            <Setter Property="Background" Value="Gray" TargetName="P_thumb"></Setter>
                            <Setter Property="Foreground" Value="Gray" TargetName="P_thumb"></Setter>
                            <Setter Property="Effect" Value="{x:Null}" TargetName="P_thumb"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--/////////////////////////////SideBar/////////////////////////////////////-->
    
    <Style x:Key="SideButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            
                            SnapsToDevicePixels="true">
                        <StackPanel Orientation="Horizontal">
                            <Border Background="LightBlue" Width="8"></Border>
                            <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>


                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" 
                                    Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" 
                                    Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" 
                                    Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" 
                                    Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="EnableInactive" DataType="{x:Type ml:SideBarItem}">

            <StackPanel Orientation="Horizontal" Margin="0">

                <Border Name="SideIcon" Margin="0" Padding="0"
                        Width="6" Background="{DynamicResource SideBarSideSymbol}" 
                        Visibility=
                        "{Binding IsSelected,RelativeSource={RelativeSource AncestorType=ListViewItem},Converter={StaticResource BoolVisibilityConvert}}"
                        VerticalAlignment="Stretch" HorizontalAlignment="Left"></Border>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Stretch" 
                           Margin="10,0,10,0" FontSize="16"
                           FontFamily="{StaticResource IconFont}" 
                           Text="{Binding  Icon,Converter={StaticResource StringIconConvert}}"></TextBlock>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Stretch"
                           FontSize="14"  Text="{Binding  Title}" ></TextBlock>
                <TextBlock Name="PlayingIcon" FontFamily="{StaticResource IconFont}" 
                           Text="{StaticResource Volume3}" 
                           Margin="10,0,5,0" VerticalAlignment="Center" Visibility="Hidden"></TextBlock>
            </StackPanel>

    </DataTemplate>
    
    <DataTemplate x:Key="UnEnableInactive" DataType="{x:Type ml:SideBarItem}">
        <Border Name="Out_Border" 
                BorderBrush="{DynamicResource BorderLine}" 
                BorderThickness="0,0,0,1" 
                Background="Transparent">
            <Grid>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Stretch"
                           Text="{Binding Title}" Margin="10,0" 
                           Foreground="{DynamicResource SideBarUnableForeground}"></TextBlock>

            </Grid>
        </Border>

    </DataTemplate>

    <!--数据与样式控件的值绑定-->
    <Style x:Key="ListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="IsEnabled" Value="{Binding Path=Interactiveable}"></Setter>
        <Setter Property="IsSelected" Value="{Binding Path=IsCurrent,Mode=TwoWay}"></Setter>
        <Setter Property="BorderThickness" Value="0,1,1,1"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Height" Value="48"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Margin}"
                                          ></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SideBarHoverBackground}"></Setter>
                <Setter Property="Foreground" Value="{DynamicResource SideBarHoverForeground}"></Setter>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource SideBarSelectedBackground}"></Setter>
            </Trigger>
            <DataTrigger Binding="{Binding IsMenuable}" Value="True">
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu Tag="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource Mode=Self}}">

                            <MenuItem Header="立即播放此歌单"
                                      Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}" >
                                <MenuItem.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                        <Binding Source="PlayAll"></Binding>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                                    </MultiBinding>
                                </MenuItem.CommandParameter>

                            </MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="编辑歌单信息" 
                                      Command="{Binding Tag.TopMaskCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="ShowModifyMask">

                            </MenuItem>
                            <MenuItem Header="新建歌单" 
                                      Command="{Binding Path=Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                      >
                                <MenuItem.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                        <Binding Source="NewList"></Binding>
                                        <Binding Path="PlacementTarget" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                                    </MultiBinding>
                                </MenuItem.CommandParameter>
                            </MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="删除此歌单"
                                      Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                        <Binding Source="Delete"></Binding>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                                    </MultiBinding>
                                </MenuItem.CommandParameter>
                            </MenuItem>
                            
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="SideList" TargetType="ListView">
        <Setter Property="Foreground" Value="{DynamicResource SideBarForeground}"></Setter>
        <Setter Property="Background" Value="{DynamicResource SideBarBackground}"></Setter>
        <Setter Property="Margin" Value="0" ></Setter>
        <Setter Property="Padding" Value="0" ></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Tag="{Binding PlacementTarget.DataContext,RelativeSource={RelativeSource Mode=Self}}">
                    <MenuItem Header="新建歌单" 
                                      Command="{Binding Path=Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                      >
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="NewList"></Binding>
                                <Binding Path="PlacementTarget" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--//////////////////////////////////////////////////////////////////////////-->

    <Style x:Key="NoHeaderTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" 
                                  Background="Transparent" 
                                  Grid.Column="0" Grid.Row="0"
                                  IsItemsHost="true" Margin="0"
                                  Visibility="Collapsed"/>
                        <Border x:Name="contentPanel" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="0" 
                                Grid.Row="1" 
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--///////////////////////////歌单列表分组样式///////////////////////////////////-->
    
    <Style  x:Key="GroupListViewStyle" TargetType="GroupItem">
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupItem">
                    <Expander Margin="0,10" Padding="0" IsExpanded="True" BorderThickness="1" BorderBrush="{DynamicResource BorderLine}">
                        <Expander.Header>
                            <StackPanel Orientation="Horizontal" Height="38">
                                <TextBlock Text="{Binding Name}" VerticalAlignment="Center"></TextBlock>
                                <TextBlock Text="     共" VerticalAlignment="Center"></TextBlock>
                                <TextBlock Text="{Binding ItemCount,StringFormat={}{0}项}" VerticalAlignment="Center"></TextBlock>
                            </StackPanel>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter></ItemsPresenter>
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="GroupListViewItemDataStyle" DataType="{x:Type ml:Media}">
        <Grid Height="38" VerticalAlignment="Center" Margin="0" Name="Out_Grid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="5*"></ColumnDefinition>
                <ColumnDefinition Width="1*" MinWidth="48"></ColumnDefinition>
                <ColumnDefinition Width="1*" MinWidth="48"></ColumnDefinition>
                <ColumnDefinition Width="1*" MinWidth="48"></ColumnDefinition>
                <ColumnDefinition Width="1*" MinWidth="68"></ColumnDefinition>
            </Grid.ColumnDefinitions>
                <StackPanel Orientation="Horizontal">
                <CheckBox Name="Check_box" Visibility="Collapsed" IsChecked="{Binding IsChecked,Mode=TwoWay}"
                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0,5,0"></CheckBox>
                    <TextBlock Name="PlayingIcon" FontFamily="{StaticResource IconFont}" Text="{StaticResource Volume3}" 
                               Foreground="{DynamicResource LovelyMarkForeground}" Margin="10,0,5,0" VerticalAlignment="Center" Visibility="Hidden"></TextBlock>
                <ToggleButton Name="LovelyIcon" VerticalAlignment="Center"
                              Style="{StaticResource LovelyToggleButton}" 
                              IsChecked="{Binding IsLovely,Mode=TwoWay}" 
                              Margin="5,0" >
                    <ToggleButton.InputBindings>
                        <MouseBinding MouseAction="LeftClick"  
                                          Command="{Binding Tag.PlayActionCommand,RelativeSource={RelativeSource AncestorType=ListViewItem} }" >
                                <MouseBinding.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                        <Binding Source="MarkLovely"></Binding>
                                        <Binding ></Binding>
                                    </MultiBinding>
                                </MouseBinding.CommandParameter>
                            </MouseBinding>
                    </ToggleButton.InputBindings>
                </ToggleButton>

                </StackPanel>
            <TextBlock Grid.Column="1" Text="{Binding Name}" TextTrimming="CharacterEllipsis" 
                       VerticalAlignment="Center" Margin="5,0" ToolTip="{Binding Name}"></TextBlock>
            <TextBlock Grid.Column="2" Text="{Binding Artist}" TextTrimming="CharacterEllipsis"
                            Margin="5,0" VerticalAlignment="Center"></TextBlock>
            <TextBlock Grid.Column="3" Text="{Binding Album}" TextTrimming="CharacterEllipsis"
                            Margin="5,0" VerticalAlignment="Center"></TextBlock>
            <TextBlock Grid.Column="4" Text="{Binding Date}" TextTrimming="CharacterEllipsis"
                            Margin="5,0" VerticalAlignment="Center"></TextBlock>
            <TextBlock Grid.Column="5" Text="{Binding TimeLength,Converter={StaticResource StringTimeConvert}}" TextTrimming="CharacterEllipsis"
                            Margin="5,0" VerticalAlignment="Center"></TextBlock>
            <Grid.InputBindings>
                    <MouseBinding MouseAction="LeftDoubleClick" 
                                  Command="{Binding Tag.PlayActionCommand,RelativeSource={RelativeSource AncestorType=ListViewItem}}" 
                                  >
                        <MouseBinding.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="PlayThis"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ListViewItem}"></Binding>
                                <Binding Path="SelectedItem" ElementName="Side_Bar"></Binding>
                            </MultiBinding>
                        </MouseBinding.CommandParameter>
                    </MouseBinding>
             </Grid.InputBindings>
        </Grid>

        <DataTemplate.Triggers>

            <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                <Setter Property="Visibility" TargetName="PlayingIcon" Value="Visible"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsValid}" Value="False">

            </DataTrigger>
            <DataTrigger Binding="{Binding Tag.CheckMode,RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
                <Setter TargetName="Check_box" Property="Visibility" Value="Visible"></Setter>
                <Setter Property="Visibility" TargetName="LovelyIcon" Value="Collapsed"></Setter>
            </DataTrigger>
            
        </DataTemplate.Triggers>
        
    </DataTemplate>

    <DataTemplate x:Key="ListMenuItemDataTemplate" DataType="{x:Type ml:SideBarItem}">
        <TextBlock Text="{Binding Title}"></TextBlock>
    </DataTemplate>
    
    <Style x:Key="ListMenuItemTemplate" TargetType="MenuItem">
        <Setter Property="Command" Value="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"></Setter>
        <Setter Property="CommandParameter">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                    <Binding Source="AddTo"></Binding>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"></Binding>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding CheckMode,RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                <Setter Property="CommandParameter">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                            <Binding Source="AddThemTo"></Binding>
                            <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"></Binding>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="GroupListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="Background" Value="{DynamicResource EvenListItemBackgroud}"></Setter>
        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ListItemHoverBackgroud}"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ListItemSelectedBackgroud}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Tag="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource Mode=Self}}" >
                    <MenuItem Header="立即播放" 
                              Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="PlayNow"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <MenuItem Header="下一首播放" 
                              Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="PlayNext"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="将已选项添加到..." 
                              Visibility="{Binding Tag.CheckMode,RelativeSource={RelativeSource AncestorType=ContextMenu},Converter={StaticResource BoolVisibilityConvert}}"
                              ItemContainerStyle="{StaticResource ListMenuItemTemplate}"
                              ItemTemplate="{StaticResource ListMenuItemDataTemplate}"
                              ItemsSource="{Binding Tag.SideBarSources,RelativeSource= {RelativeSource AncestorType=ContextMenu},Converter={StaticResource ListMenuFileterConvert}}">
                        
                    </MenuItem>
                    <MenuItem Header="添加到..."  
                              ItemContainerStyle="{StaticResource ListMenuItemTemplate}"
                              ItemTemplate="{StaticResource ListMenuItemDataTemplate}"
                              ItemsSource="{Binding Tag.SideBarSources,RelativeSource= {RelativeSource AncestorType=ContextMenu},Converter={StaticResource ListMenuFileterConvert}}">
                        
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="将已选项从列表删除" 
                              Visibility="{Binding Tag.CheckMode,RelativeSource={RelativeSource AncestorType=ContextMenu},Converter={StaticResource BoolVisibilityConvert}}"
                              Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                              >
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="DeleteThem"></Binding>
                                <Binding Path="DataContext"  RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>

                    <MenuItem Header="从列表中移除" Command="{Binding Tag.ListCommand,RelativeSource= {RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="DeleteThis"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"></Condition>
                    <Condition Property="ListView.AlternationIndex" Value="1"></Condition>
                    <Condition Property="IsSelected" Value="False"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource OddListItemBackgroud}"></Setter>
            </MultiTrigger>
           
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////ScrollBar样式///////////////////////////////////-->
    
    <Style x:Key="ScrollRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="IsTabStop" Value="False"></Setter>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border BorderThickness="0" CornerRadius="5" Background="{TemplateBinding Background}">
                        
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollThumbStyle" TargetType="Thumb">
        <Setter Property="Background" Value="{DynamicResource ScrollBarNormal}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ScrollBarHover}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="8"/>
        <Setter Property="MinWidth" Value="8"/>
        <Setter Property="Margin" Value="0,-10"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="5"
                                Grid.Row="1"/>

                        <Track x:Name="PART_Track" IsDirectionReversed="true" 
                               IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" 
                                              Style="{StaticResource ScrollRepeatButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" 
                                              Style="{StaticResource ScrollRepeatButtonStyle}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollThumbStyle}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="8"/>
                <Setter Property="MinHeight" Value="8"/>
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Margin" Value="-16,0"></Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="{TemplateBinding BorderThickness}" 
                                        Background="{TemplateBinding Background}" 
                                        CornerRadius="5"
                                        Grid.Column="1"/>

                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" 
                                                      Style="{StaticResource ScrollRepeatButtonStyle}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" 
                                                      Style="{StaticResource ScrollRepeatButtonStyle}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollThumbStyle}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--////////////////////////////////////////////////////////////////////////-->

    <Style x:Key="SettingTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"></Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          ContentSource="Header" 
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Border Name="BottomBar" Background="{DynamicResource LovelyMarkForeground}" Height="4" Visibility="Hidden"
                                VerticalAlignment="Bottom" Margin="0,0,0,-3"></Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True" >
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomBar"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--////////////////////////////////////LRC////////////////////////////////////////-->
    <DataTemplate x:Key="LRC_ItemsDataStyle" DataType="{x:Type ml:LrcModle}">
        <Border MinHeight="28" Background="Transparent" Width="340">
            <TextBlock Text="{Binding Lrc}" 
                       Background="Transparent"
                       TextAlignment="Center" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center"
                       TextWrapping="Wrap"
                       Margin="0"></TextBlock>            
        </Border>

        
    </DataTemplate>

    <Style x:Key="Lrc_itemStyle" TargetType="ListViewItem">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            > 
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Height="{TemplateBinding Height}" 
                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                          TextElement.FontSize="{TemplateBinding FontSize}"></ContentPresenter>
                    </Border>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Setter Property="FontSize" Value="15"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="Lrc_List" TargetType="ListView">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"></Setter>
    </Style>
    
    <!--//////////////////////////////////////////////////////////////-->
    <Style x:Key="ViewPortControlButtonStyle" TargetType="Button">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <TextBlock FontSize="28" TextAlignment="Center" VerticalAlignment="Center"
                                   Style="{DynamicResource IconText}" Text="{StaticResource MusicCircle}"  ></TextBlock>
                        <Image Width="64" Height="64" Stretch="UniformToFill"
                               Source="{Binding CurrentMedia.Cover,
                                        Converter={StaticResource StringImageConvert},
                                        ConverterParameter=Media}" Margin="0">
                        </Image>

                        <Border Background="{DynamicResource ViewPortBackground}" 
                                Name="Media_Control_Cover" Visibility="Hidden" Margin="0">
                            <TextBlock  Name="Zoom_Panel"
                                Text="{StaticResource ZoomOut}"
                                       Style="{DynamicResource IconText}"
                                       FontSize="24" VerticalAlignment="Center"
                                       Foreground="{DynamicResource ViewPortForeground}" TextAlignment="Center">

                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Media_Control_Cover"></Setter>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsMediaVisible,RelativeSource={RelativeSource AncestorType=Window}}" Value="Visible">
                            <Setter Property="Text" Value="{StaticResource ZoomIn}" TargetName="Zoom_Panel"></Setter>
                        </DataTrigger>
                       
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--///////////////////////////Togger//////////////////////////////////-->
    <Style x:Key="ChangetoggleButton" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border>
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter></ContentPresenter>
                            <TextBlock Name="Font" Visibility="Visible" Text="选择" VerticalAlignment="Center" Margin="5,0"></TextBlock>
                        </StackPanel>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Text" Value="完成"   TargetName="Font"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="Background" Value="{DynamicResource ControlBarHoverBackground}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NothingToggleButton" TargetType="ToggleButton">
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Margin="{TemplateBinding Margin}"
                        >
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            ></ContentPresenter>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--///////////////////////////////Search//////////////////////////////////-->
    <DataTemplate x:Key="SearchItemStyle" DataType="{x:Type ml:Media}">
        <Grid>
            <TextBlock Text="{Binding Name}"></TextBlock>
        </Grid>
    </DataTemplate>
    
    
    <!--///////////////////////////////CurrentList///////////////////////////////-->
    
    <Style x:Key="CurrentListMenuItemTemplate" TargetType="MenuItem">
        <Setter Property="Command" Value="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}"></Setter>
        <Setter Property="CommandParameter">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                    <Binding Source="AddTo"></Binding>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"></Binding>
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CurrentListItemStyle" TargetType="ListViewItem">
        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="Margin" Value="2"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="Background" Value="{DynamicResource EvenListItemBackgroud}"></Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Tag="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource Mode=Self}}">
                    <MenuItem Header="下一个播放"
                              Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="PlayNext"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="编辑信息"
                              Command="{Binding Tag.TopMaskCommand , RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="ShowMediaMask"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="将此项添加到..."
                              ItemContainerStyle="{StaticResource CurrentListMenuItemTemplate}"
                              ItemTemplate="{StaticResource ListMenuItemDataTemplate}"
                              ItemsSource="{Binding Tag.SideBarSources,RelativeSource= {RelativeSource AncestorType=ContextMenu},Converter={StaticResource ListMenuFileterConvert}}">
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="删除此项"
                              Command="{Binding Tag.ListCommand,RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="CurrentRemove"></Binding>
                                <Binding  Path="DataContext" RelativeSource="{RelativeSource AncestorType=ContextMenu}"></Binding>
                            </MultiBinding>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ListItemHoverBackgroud}"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ListItemSelectedBackgroud}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"></Condition>
                    <Condition Property="ListView.AlternationIndex" Value="1"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource OddListItemBackgroud}"></Setter>
                
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="CurrentListItemDataStyle" DataType="{x:Type ml:Media}">
        <Border BorderBrush="Transparent" BorderThickness="0" HorizontalAlignment="Stretch" Height="32">
            <Grid TextBlock.TextAlignment="Left">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" MinWidth="24" ></ColumnDefinition>
                    <ColumnDefinition Width="Auto" MinWidth="24" ></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="Auto" MinWidth="64" ></ColumnDefinition>
                    <ColumnDefinition Width="Auto" MinWidth="64" ></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid.InputBindings>
                    <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding DataContext.PlayActionCommand,RelativeSource={RelativeSource AncestorType=Window}}">
                        <MouseBinding.CommandParameter>
                            <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                <Binding Source="PlayCurrent"></Binding>
                                <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=TemplatedParent}"></Binding>
                            </MultiBinding>
                        </MouseBinding.CommandParameter>
                    </MouseBinding>
                </Grid.InputBindings>


                <TextBlock Text="{StaticResource Volume3}" FontFamily="{StaticResource IconFont}"  Margin="5,0"
                           VerticalAlignment="Center" Foreground="{DynamicResource LovelyMarkForeground}"
                           Visibility="{Binding IsPlaying,Converter={StaticResource BoolVisibilityConvert}}"></TextBlock>

                <ToggleButton Name="LovelyIcon" VerticalAlignment="Center"
                              Style="{StaticResource LovelyToggleButton}" 
                              IsChecked="{Binding IsLovely,Mode=TwoWay}" 
                              Margin="5,0"  Grid.Column="1">
                    <ToggleButton.InputBindings>
                        <MouseBinding MouseAction="LeftClick"  
                                          Command="{Binding DataContext.PlayActionCommand,RelativeSource={RelativeSource AncestorType=Window} }" >
                            <MouseBinding.CommandParameter>
                                <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                    <Binding Source="MarkLovely"></Binding>
                                    <Binding ></Binding>
                                </MultiBinding>
                            </MouseBinding.CommandParameter>
                        </MouseBinding>
                    </ToggleButton.InputBindings>
                </ToggleButton>
                <TextBlock Text="{Binding Name}"  ToolTip="{Binding Name}" Grid.Column="2"
                           TextAlignment="Left" VerticalAlignment="Center" TextTrimming="CharacterEllipsis"></TextBlock>
                <TextBlock Text="{Binding Artist}"  Grid.Column="3" VerticalAlignment="Center" ></TextBlock>
                <TextBlock Text="{Binding TimeLength,Converter={StaticResource StringTimeConvert}}" Margin="5,0"
                           Grid.Column="4" HorizontalAlignment="Right" VerticalAlignment="Center"></TextBlock>
            </Grid>
        </Border>
            
    </DataTemplate>

 <!--//////////////////////////Pathlist//////////////////////////////////-->

    <DataTemplate x:Key="PathListItemDataStyle" DataType="{x:Type sys:String}">
        <TextBlock Text="{Binding }" ToolTip="{Binding }" TextAlignment="Center" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"></TextBlock>
    </DataTemplate>

    <Style x:Key="PathListItemStyle" TargetType="ListBoxItem" >
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border     Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}">
                        <Grid
                              Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition ></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ></ContentPresenter>
                            <Button Name="Remove_Item" Visibility="Hidden" Grid.Column="1"
                                    Background="Transparent" Width="24" Height="24"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    Style="{StaticResource NothingButton}"
                                          Command="{Binding DataContext.ApplyModifyCommand,RelativeSource={RelativeSource AncestorType=Window}}"
                                          >
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PlayMultyConvert}">
                                        <Binding Source="RemovePath"></Binding>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=TemplatedParent}"></Binding>
                                    </MultiBinding>
                                </Button.CommandParameter>
                                <TextBlock>X</TextBlock>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"  TargetName="Remove_Item"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="Remove_Item"></Setter>
                            <Setter Property="Background" Value="{DynamicResource ListItemHoverBackgroud}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLine}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.ColumnSpan="4" Grid.Column="0" 
                                CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="3">
                                <Border BorderBrush="Transparent" 
                                        BorderThickness="{TemplateBinding BorderThickness}" 
                                        CornerRadius="2"/>
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>